
(require* wmeTypes "wmeTypes.clp")
;https://stackoverflow.com/questions/19042218/jess-multislot-questions
;



;verificar esta secci�n
(deftemplate ecuaciond (slot e1)(multislot valores))
(deftemplate ecuacion (slot valor (type INTEGER)))
(deffacts init 
	(ecuaciond (e1 derecho) (valores x ))
	(ecuaciond (e1 derecho2) (valores 3x - 4  ))
 )



(defrule change_valuesd
    (ecuaciond (e1 ?ex) (valores $? x  $? ))
=>
(printout t "en el lado "  ?ex " hay que pasar valores al otro miembro." crlf)

)


(deftemplate ecuacioni (slot e2)(multislot valores1))

(deffacts init 
	(ecuacioni (e2 izquierdo) (valores1 7 x  +  2))
	
 )

;comprobar si se puede realizar a valores enteros

;para comprobar si los valores de suma son correctos
(deffunction sumar_values (?a ?b ?c)
     (bind ?r (+ ?a ?b ?c))
    (printout t ?r crlf)
    (return ?r)
)
(sumar_values 20 15 6)



(deffacts introducir-datos
	(ecuacion (valor 20))
    (ecuacion (valor 15))
    (ecuacion (valor 41))
    
)

(bind ?t (assert (ecuacion (valor 10)) ) )

;suma de valores
(deffunction sumAll($?args)
    (eval (str-cat "(+ " (implode$ ?args) ")" )))


(deffunction sumAll($?args)
    (bind ?sum 0)
    (foreach ?num ?args
        (bind ?sum (+ ?sum ?num))
    )
    (printout t ?sum " es el total." crlf)
)
(bind $?valores-lista (create$ 4 5 7)) ; se crea la lista dentro de una variable
(sumAll $?valores-lista )
;comprobaar si los valores de resta son correctos



; resta de valores
(deffunction subsAll($?args)
    (bind ?sum 0)
    (foreach ?num ?args
        (bind ?sum (- ?sum ?num))
    )
    (printout t ?sum " es el total." crlf)
)
(sumAll 8 -2 -2  )
;multiplicacion de valores
(deffunction multyAll($?args)
    (bind ?sum 1)
    (foreach ?num ?args
        (bind ?sum (* ?sum ?num))
    )
    (printout t ?sum " es el total." crlf)
)
(multyAll 8 2 -2  ) ;los valores que se encuentran en esta funcion deben ser primero + -

;cambia el valor al cambiar el termino

(defrule change_valuesi
	(ecuacioni (e2 ?ex) (valores1 $? 7 $?))
=>
(printout t "en el lado "  ?ex " hay que pasar valores al otro miembro." crlf)

)

(reset)
(run)
(clear)
;Functions



(deffunction cambio_signo (?x)
     (bind ?w -1)
    (bind ?l (*  ?x ?w))
    
    (printout t ?l crlf)
)

;(predict-observable-action ?entradalbd "UpdateTable" (eval cambio_signo -20) )
(cambio_signo -20)

; regla para evaluar si es una ecuacion solventable

(defrule solvable-equation
    (equation (?x ?operator ?const))
    (test (or (eq ?operator +)
              (eq ?operator -)))
    =>
    (assert (solvable)))

 ;evaluar la respuesta de los usuarios y dar su opinión   

 (defrule evaluate-response
    (response (user ?answer))
    (equation (?x ?operator ?const))
    (solvable)
    =>
    (if (eq ?operator +)
        (if (eq ?answer (- ?const ?x))
            (assert (correct))
            (assert (incorrect)))
        (if (eq ?answer (+ ?const ?x))
            (assert (correct))
            (assert (incorrect)))))

;Función para simplificar expresiones algebraicas
(deffunction simplify-expression (?expression)
    (bind ?expression (replace ?expression " " ""))
    (while (re-search-forward "([+-]?\\d*)\\*?x" ?expression nil)
        (bind ?coeff (str-to-int (match-string 1)))
        (if (eq ?coeff 0)
            (bind ?expression (replace ?expression (match-string 0) "0"))
            (if (eq ?coeff 1)
                (bind ?expression (replace ?expression (match-string 0) "x"))
                (if (eq ?coeff -1)
                    (bind ?expression (replace ?expression (match-string 0) "-x"))
                    (bind ?expression (replace ?expression (match-string 0) (* ?coeff "x")))))))
    (bind ?expression (replace ?expression "^1" ""))
    (bind ?expression (replace ?expression "^+" "+"))
    (bind ?expression (replace ?expression "^-" "-"))
    ?expression)

; Estas reglas y funciones pueden integrarse en los componentes de CTAT para crear un sistema de tutoría inteligente
; que guíe al usuario en el proceso de resolución de ecuaciones de primer grado. Por ejemplo, la regla de ecuación resoluble
; se puede utilizar para determinar si una ecuación dada es resoluble, y la regla de evaluación de respuesta puede evaluar la 
; respuesta del usuario y proporcionar información. La función simplificar-expresión puede utilizarse para simplificar las expresiones
; algebraicas de las ecuaciones.

; detectar la variable x
(defrule detect-x-variable
    (field ?field)
    (test (str-index (str-upcase ?field) "X"))
    =>
    (assert (x-variable-detected)))

; para detectar expresiones regulares
(defrule syntax-error
    (response (user ?answer))
    (test (not (eq ?answer "")))
    (test (not (matches ?answer "^[a-zA-Z0-9+*/()-]+$")))
    =>
    (assert (feedback "Syntax Error: Please enter a valid equation.")))

(deftemplate fraccion
  (slot valor (type float)))
  
(deftemplate MAIN::Resultado


; para verificar si la division de la fraccion es encuentran
(defrule verificar-fraccion
  (declare (salience 10))
  (fraccion (valor ?fraccion))
  (test (str-compare ?fraccion ".[0-9]+/[0-9]+."))
  =>
  (bind ?numerador (substring ?fraccion 0 (str-index ?fraccion "/")))
  (bind ?denominador (substring ?fraccion (+ 1 (str-index ?fraccion "/"))))
  (if (eq ?denominador 0)
      then
      (assert (resultado "Indefinido")))
  (else
      (bind ?division (/ ?numerador ?denominador))
      (if (integerp ?division)
          then
          (assert (resultado ?division))
          else
          (assert (resultado "No entero")))))
